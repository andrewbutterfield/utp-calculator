UTP-Calc v0.2, Root 0.3, std-utp 0.2, std 0.2, std-expr 0.1, std-set 0.1, std-pred 0.2
   A(r|ii|r1,r2) ∨ A(r1|a|r1*) ∨ A(r2|b|r2*) ∨ A(r1*,r2*|ii|r*)
 ; A(r|ii|r1,r2) ∨ A(r1|a|r1*) ∨ A(r2|b|r2*) ∨ A(r1*,r2*|ii|r*)

 ?,d,r,l,s,c,I,i,u,x :- I
Invariant:  [r|r1,r2,r1*,r2*|r*] ∧ [r1|r1*] ∧ [r2|r2*]
   A(r|ii|r1,r2) ∨ A(r1|a|r1*) ∨ A(r2|b|r2*) ∨ A(r1*,r2*|ii|r*)
 ; A(r|ii|r1,r2) ∨ A(r1|a|r1*) ∨ A(r2|b|r2*) ∨ A(r1*,r2*|ii|r*)

...

 = « simplify »
      A(r,r1|a ; ii|r1,r2,r1*)
    ∨ A(r,r2|b ; ii|r1,r2,r2*)
    ∨ A(r,r1*,r2*|ii ; ii|r*,r1,r2)
 ∨ A(r|ii ; a|r2,r1*) ∨ A(r1,r2|b ; a|r1*,r2*) ∨ A(r1,r1*,r2*|ii ; a|r*,r1*)
 ∨ A(r|ii ; b|r1,r2*) ∨ A(r1,r2|a ; b|r1*,r2*) ∨ A(r2,r1*,r2*|ii ; b|r*,r2*)
 ∨ A(r,r1*,r2*|ii ; ii|r*,r1,r2) ∨ A(r1,r2*|a ; ii|r*) ∨ A(r2,r1*|b ; ii|r*)

 ?,d,r,l,s,c,I,i,u,x :- i

 = « inv-chk : applicable deeper »
   false ∨ false ∨ false
 ∨ false ∨ false ∨ false
 ∨ false ∨ false ∨ false
 ∨ false ∨ false ∨ false

 ?,d,r,l,s,c,I,i,u,x :- x
*Root> rput invVPar
[r|r1,r2,r1*,r2*|r*] ∧ [r1|r1*] ∧ [r2|r2*]
*Root>


It should go from

[r|r1,r2,r1*,r2*|r*] ∧ [r1|r1*] ∧ [r2|r2*]

A(r,r1|a ; ii|r1,r2,r1*) -- fail
A(r,r2|b ; ii|r1,r2,r2*) -- fail
A(r,r1*,r2*|ii ; ii|r*,r1,r2) -- fail
A(r|ii ; a|r2,r1*) -- OK
A(r1,r2|b ; a|r1*,r2*) -- OK
A(r1,r1*,r2*|ii ; a|r*,r1*) -- fail
A(r|ii ; b|r1,r2*) -- OK
A(r1,r2|a ; b|r1*,r2*) -- OK
A(r2,r1*,r2*|ii ; b|r*,r2*) -- fail
A(r,r1*,r2*|ii ; ii|r*,r1,r2) -- fail
A(r1,r2*|a ; ii|r*) -- OK
A(r2,r1*|b ; ii|r*) -- OK

to

A(r|ii;a|r2,r1*)
A(r1,r2|b;a|r1*,r2*)
A(r|ii;b|r1,r2*)
A(r1,r2|a;b|r1*,r2*)
A(r1,r2*|a;ii|r*)
A(r2,r1*|b;ii|r*) 
